Movie Embed
Endpoint

Copy
https://vidfast.pro/movie/{id}?autoPlay=true
Required Parameters
{id}Movie identifier from IMDB or TMDB
Optional Parameters
titleControls whether the media title is displayed
posterDetermines if the poster image is shown
autoPlayControls whether the media starts playing automatically
startAtStarts the video at the specified time in seconds
themeChanges the player's color (hex code format)
serverChanges the default server for the player (set to server name)
hideServerControls whether the server selector button is shown or hidden
fullscreenButtonControls whether the fullscreen button is shown or hidden
chromecastControls whether the Chromecast button is shown or hidden
subSets the default subtitle (e.g. en, es, fr)
Examples
https://vidfast.pro/movie/tt6263850

https://vidfast.pro/movie/533535?theme=16A085


TV Show Embed
Endpoint

Copy
https://vidfast.pro/tv/{id}/{season}/{episode}?autoPlay=true
Required Parameters
{id}TV show identifier from IMDB or TMDB
{season}The season number
{episode}The episode number
Optional Parameters
titleControls whether the media title is displayed
posterDetermines if the poster image is shown
autoPlayControls whether the media starts playing automatically
startAtStarts the video at the specified time in seconds
themeChanges the player's color (hex code format)
nextButtonDisplays the "Next Episode" button when 90% of the current episode has been watched
autoNextAutomatically plays the next episode when the current one ends (requires nextButton)
serverChanges the default server for the player (set to server name)
hideServerControls whether the server selector button is shown or hidden
fullscreenButtonControls whether the fullscreen button is shown or hidden
chromecastControls whether the Chromecast button is shown or hidden
subSets the default subtitle (e.g. en, es, fr)
Examples
https://vidfast.pro/tv/tt4052886/1/5

https://vidfast.pro/tv/63174/1/5?nextButton=true&autoNext=true



Basic Implementation
Copy and paste this code into your HTML where you want the player to appear:

<iframe 
  src="https://vidfast.pro/movie/533535" 
  width="100%" 
  height="100%" 
  frameborder="0" 
  allowfullscreen 
  allow="encrypted-media"
></iframe>

Copy code
Responsive Implementation
Wrap the iframe in this container to maintain the correct 16:9 aspect ratio:

<!-- 16:9 Aspect Ratio Container -->
<div style="position: relative; padding-bottom: 56.25%; height: 0;">
  <iframe
    src="https://vidfast.pro/movie/533535"
    style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"
    frameborder="0"
    allowfullscreen
    allow="encrypted-media"
  ></iframe>
</div>

Copy code
Responsive with Tailwind CSS
<div className="relative w-full pt-[56.25%]">
  <iframe
    src="https://vidfast.pro/movie/533535"
    className="absolute top-0 left-0 w-full h-full"
    frameBorder="0"
    allowFullScreen
    allow="encrypted-media"
  ></iframe>
</div>

Copy code


Color Themes
Customize the player's color by adding the theme parameter:

Green Theme
<iframe
  src="https://vidfast.pro/movie/533535?theme=16A085"
></iframe>
#16A085

Copy
Blue Theme
<iframe
  src="https://vidfast.pro/movie/533535?theme=2980B9"
></iframe>
#2980B9

Copy
Purple Theme
<iframe
  src="https://vidfast.pro/movie/533535?theme=9B59B6"
></iframe>
#9B59B6

Copy
Advanced Features
Complete Feature Example
<iframe
  src="https://vidfast.pro/tv/tt4052886/1/5?autoPlay=true&title=true&poster=true&theme=16A085&nextButton=true&autoNext=true"
  width="100%"
  height="100%"
  frameborder="0"
  allowfullscreen
  allow="encrypted-media"
></iframe>

Copy complete example
Feature Compatibility Matrix
Feature	Movies	TV Shows
Color Themes	✓	✓
AutoPlay	✓	✓
Start Time	✓	✓
Poster Display	✓	✓
Next Episode	✗	✓
Auto Next	✗	✓


Events & Progress Tracking
The player can send watch progress events to the parent window. You can save this progress to localStorage or your own backend.

Available Events
playTriggered when video starts playing
pauseTriggered when video is paused
seekedTriggered when user seeks to a different timestamp
endedTriggered when video playback ends
timeupdateTriggered periodically during playback
playerstatusTriggered when getStatus is called
Event Data Structure
{
    type: "PLAYER_EVENT",
    data: {
        event: "play" | "pause" | "seeked" | "ended" | "timeupdate" | "playerstatus",
        currentTime: number,
        duration: number,
        tmdbId: number,
        mediaType: "movie" | "tv",
        season?: number,
        episode?: number,
        playing: bool,
        muted: bool,
        volume: number
    }
}

Event Listener Implementation
Add this script where your iframe is located. For React/Next.js, place it in a useEffect hook.

const vidfastOrigins = [
    'https://vidfast.pro',
    'https://vidfast.in',
    'https://vidfast.io',
    'https://vidfast.me',
    'https://vidfast.net',
    'https://vidfast.pm',
    'https://vidfast.xyz'
];

window.addEventListener('message', ({ origin, data }) => {
    if (!vidfastOrigins.includes(origin) || !data) {
        return;
    }

    if (data.type === 'PLAYER_EVENT') {
        const { event, currentTime, duration } = data.data;

        console.log(`Player ${event} at ${currentTime}s of ${duration}s`);

        // Add custom event handling logic here
    }
});

Direct Media Data Event Listener
This simpler event listener directly captures and stores the complete media data structure:

const vidfastOrigins = [
    'https://vidfast.pro',
    'https://vidfast.in',
    'https://vidfast.io',
    'https://vidfast.me',
    'https://vidfast.net',
    'https://vidfast.pm',
    'https://vidfast.xyz'
];

window.addEventListener('message', ({ origin, data }) => {
    if (!vidfastOrigins.includes(origin) || !data) {
        return;
    }

    if (data.type === 'MEDIA_DATA') {
        localStorage.setItem('vidFastProgress', JSON.stringify(data.data));
    }
});

Stored Data Structure Example
The data is stored in localStorage and contains movie/show details, watch progress, and episode-specific progress for TV shows.

{
    "t63174": {
        "id": 63174,
        "type": "tv",
        "title": "Lucifer",
        "poster_path": "/ekZobS8isE6mA53RAiGDG93hBxL.jpg",
        "backdrop_path": "/wbiPjTWpZMIB8ffBq7HvzAph4Ft.jpg",
        "progress": {
            "watched": 793.207692,
            "duration": 2695.3689
        },
        "last_season_watched": 1,
        "last_episode_watched": 1,
        "show_progress": {
            "s1e1": {
                "season": 1,
                "episode": 1,
                "progress": {
                    "watched": 793.207692,
                    "duration": 2695.3689
                },
                "last_updated": 1742578021768
            }
        },
        "last_updated": 1742578021768
    },
    "m533535": {
        "id": 533535,
        "type": "movie",
        "title": "Deadpool & Wolverine",
        "poster_path": "/8cdWjvZQUExUUTzyp4t6EDMubfO.jpg",
        "backdrop_path": "/by8z9Fe8y7p4jo2YlW2SZDnptyT.jpg",
        "progress": {
            "watched": 353.530349,
            "duration": 7667.227
        },
        "last_updated": 1742577064433
    }
}



PostMessage API Control
Control VidFast players programmatically using the PostMessage API. Perfect for watch party features and custom player integrations.

Available Commands
play
Resume video playback
iframe.contentWindow.postMessage({
    command: 'play'
}, '*');
pause
Pause video playback
iframe.contentWindow.postMessage({
    command: 'pause'
}, '*');
seek
Jump to specific time in video (seconds)
iframe.contentWindow.postMessage({
    command: 'seek',
    time: 120  // Jump to 2 minutes
}, '*');
volume
Set player volume (0.0 to 1.0)
iframe.contentWindow.postMessage({
    command: 'volume',
    level: 0.5  // Set to 50% volume
}, '*');
mute
Toggle mute state
iframe.contentWindow.postMessage({
    command: 'mute',
    muted: true  // true to mute, false to unmute
}, '*');
getStatus
Get current player status
iframe.contentWindow.postMessage({
    command: 'getStatus'
}, '*');

// Listen for response
window.addEventListener('message', ({ data }) => {
    if (data.type === 'PLAYER_EVENT' && data.data.event === 'playerstatus') {
        console.log('Current time:', data.data.currentTime);
        console.log('Duration:', data.data.duration);
        console.log('Is playing:', data.data.playing);
        console.log('Is muted:', data.data.muted);
        console.log('Volume:', data.data.volume);
    }
});
Watch Party Integration Example
Perfect for synchronizing video playback across multiple users in a watch party scenario.

// Watch Party Controller Example
class WatchPartyController {
    vidfastOrigins = [
        'https://vidfast.pro',
        'https://vidfast.in',
        'https://vidfast.io',
        'https://vidfast.me',
        'https://vidfast.net',
        'https://vidfast.pm',
        'https://vidfast.xyz'
    ]

    constructor(iframeElement) {
        this.iframe = iframeElement;
        this.setupEventListeners();
    }

    // Sync play command to all participants
    syncPlay(time) {
        this.iframe.contentWindow.postMessage({
            command: 'play',
            time: time
        }, '*');

        // Broadcast to other participants
        this.broadcastToParty({
            action: 'play',
            time: time
        });
    }

    // Sync pause command to all participants
    syncPause(time) {
        this.iframe.contentWindow.postMessage({
            command: 'pause',
            time: time
        }, '*');

        this.broadcastToParty({
            action: 'pause',
            time: time
        });
    }

    // Sync seek to specific time for all participants
    syncSeek(time) {
        this.iframe.contentWindow.postMessage({
            command: 'seek',
            time: time
        }, '*');

        this.broadcastToParty({
            action: 'seek',
            time: time
        });
    }

    // Handle incoming party commands
    handlePartyCommand(command) {
        switch (command.action) {
            case 'play':
                this.iframe.contentWindow.postMessage({
                    command: 'play'
                }, '*');
                break;
            case 'pause':
                this.iframe.contentWindow.postMessage({
                    command: 'pause'
                }, '*');
                break;
            case 'seek':
                this.iframe.contentWindow.postMessage({
                    command: 'seek',
                    time: command.time
                }, '*');
                break;
        }
    }

    broadcastToParty(command) {
        // Your party synchronization logic here
        // (WebSocket, Socket.IO, etc.)
    }

    onPlayerStatusUpdate(status) {
        // Your status update logic here
    }

    setupEventListeners() {
        // Listen for player events
        window.addEventListener('message', (event) => {
            if (!this.vidfastOrigins.includes(event.origin) || !event.data) {
                return;
            }

            if (event.data.type === 'PLAYER_EVENT') {
                const {
                    event: playerEvent,
                    currentTime
                } = event.data.data;

                switch (playerEvent) {
                    case 'play':
                        this.syncPlay(currentTime);
                        break;
                    case 'pause':
                        this.syncPause(currentTime);
                        break;
                    case 'seeked':
                        this.syncSeek(currentTime);
                        break;
                }
            }

            if (event.data.type === 'PLAYER_EVENT' && event.data.data.event === 'playerstatus') {
                this.onPlayerStatusUpdate(event.data.data);
            }
        });
    }
}

// Usage
const iframe = document.querySelector('#vidfast-player');
const watchParty = new WatchPartyController(iframe);
⚠️ Important Notes
• PostMessage commands work across all VidFast domains
• Commands are processed asynchronously - status responses may have a small delay
• For watch parties, implement proper synchronization logic to handle network latency
• Always handle message events to receive player status updates
• Seek commands accept time in seconds (integer values)


Premium Features
Our platform provides everything you need to deliver exceptional video experiences.

Seamless Embedding
Integrate our player into your website with a simple iframe code. No complicated setup required.

High-Quality Streaming
Deliver crystal-clear video content with adaptive bitrate streaming for all network conditions.

Lightning Fast
Optimized loading times and playback performance to keep your users engaged.

Enhanced Security
Advanced protection against unauthorized embedding and content scraping.

Performance Analytics
Comprehensive analytics to monitor viewer engagement and player performance.

Multiple Integrations
Connect with various content delivery networks and streaming solutions.

System Status
Real-time monitoring of our infrastructure. Check the operational status of our scrapers and proxy servers.

Scrapers
Refresh Status
Name
Status
Response Time
Uptime
Last Updated
Alpha
Operational
582ms
100%
Just now
Beta
Operational
73ms
100%
Just now
Charlie
Operational
646ms
100%
Just now
Cobra
Operational
133ms
100%
Just now
Viper
Offline
-
-
Just now
Specter
Offline
-
-
Just now
Ranger
Offline
-
-
Just now
Delta
Operational
689ms
100%
Just now
Echo
Operational
473ms
100%
Just now
Fury
Operational
521ms
100%
Just now
Horizon
Offline
-
-
Just now
Iron
Operational
2117ms
100%
Just now
Jiraiya
Operational
460ms
18%
Just now
Kirito
Operational
558ms
34%
Just now
Luffy
Operational
422ms
18%
Just now
Meliodas
Operational
716ms
58%
Just now
Proxy Servers
Refresh Status
Name
Status
Location
Current Load
Last Check
Proxy-01
Operational
EU-Central
2%
Just now
Proxy-02
Operational
EU-Central
2%
Just now
Proxy-03
Operational
EU-Central
2%
Just now
Proxy-04
Operational
EU-Central
2%
Just now
Proxy-05
Operational
EU-Central
2%
Just now
Proxy-06
Operational
EU-Central
2%
Just now